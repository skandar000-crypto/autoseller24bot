import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import StateFilter
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State

API_TOKEN = '8364850506:AAFxKYwgrAfixORbkGlyfM_s0NhUVIQ59RU'
OWNER_CHAT_ID = 477634260

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üöó –ö–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ"),
            KeyboardButton(text="üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
        ],
        [
            KeyboardButton(text="‚ùì FAQ"),
            KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")
        ],
        [
            KeyboardButton(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"),
            KeyboardButton(text="‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏"),
            KeyboardButton(text="‚õî –û—Ç–º–µ–Ω–∞")
        ]
    ],
    resize_keyboard=True
)

car_data = {
    "Toyota": {"Prius": list(range(2017, 2025))},
    "Honda": {"Vezel": list(range(2017, 2025))},
    "Mazda": {"CX-5": list(range(2017, 2025))},
    "Nissan": {"Note": list(range(2017, 2025))},
    "Subaru": {"Forester": list(range(2017, 2025))}
}

class CalcFSM(StatesGroup):
    brand = State()
    model = State()
    year = State()
    budget = State()

class RequestFSM(StatesGroup):
    name = State()
    phone = State()
    comment = State()

faq_list = [
    {"q": "–ö–∞–∫–æ–π —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ –Ø–ø–æ–Ω–∏–∏?", "a": "–û–±—ã—á–Ω–æ –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 35-50 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã."},
    {"q": "–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ?", "a": "–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∏—Ç —Ü–µ–Ω–∞ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ, –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞, –ø–æ—à–ª–∏–Ω—ã –∏ –±—Ä–æ–∫–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏."},
    {"q": "–ú–æ–∂–Ω–æ –ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∫—Ä–µ–¥–∏—Ç –∏–ª–∏ —Ä–∞—Å—Å—Ä–æ—á–∫—É?", "a": "–î–æ—Å—Ç—É–ø–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–∞–Ω–∫–∏-–ø–∞—Ä—Ç–Ω–µ—Ä—ã. –£—Ç–æ—á–Ω—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞."},
    {"q": "–°–∫–æ–ª—å–∫–æ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞?", "a": "–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ ‚Äî 15% –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–µ –∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ."},
    {"q": "–ö–∞–∫–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ?", "a": "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ —Å 2022 –≥–æ–¥–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º –∞–≤—Ç–æ –¥–æ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ —É—á–µ—Ç."}
]

def get_faq_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=item['q'], callback_data=f"faq_{i}")] for i, item in enumerate(faq_list)
        ]
    )

@dp.message(F.text == "/start")
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AutoSeller24!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=main_menu)

@dp.message(F.text == "üöó –ö–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ")
async def catalog_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í —Ä–∞–∑–¥–µ–ª–µ /–ö–∞—Ç–∞–ª–æ–≥ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ—à–∞–≥–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏.", reply_markup=main_menu)

@dp.message(F.text == "üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
async def calculator_start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(CalcFSM.brand)
    brands = [InlineKeyboardButton(text=brand, callback_data=f"brand:{brand}") for brand in car_data]
    kb = InlineKeyboardMarkup(inline_keyboard=[[b] for b in brands])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ:", reply_markup=kb)

@dp.callback_query(F.data.startswith("brand:"))
async def calculator_choose_brand(callback: CallbackQuery, state: FSMContext):
    brand = callback.data.split(":", 1)[1]
    await state.update_data(brand=brand)
    models = [InlineKeyboardButton(text=model, callback_data=f"model:{model}") for model in car_data[brand]]
    kb = InlineKeyboardMarkup(inline_keyboard=[[m] for m in models])
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Ä–∫—É: <b>{brand}</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", parse_mode="HTML", reply_markup=kb)
    await state.set_state(CalcFSM.model)
    await callback.answer()

@dp.callback_query(F.data.startswith("model:"))
async def calculator_choose_model(callback: CallbackQuery, state: FSMContext):
    model = callback.data.split(":", 1)[1]
    await state.update_data(model=model)
    data = await state.get_data()
    years = car_data[data['brand']][model]
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=str(year), callback_data=f"year:{year}")] for year in years])
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å: <b>{model}</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:", parse_mode="HTML", reply_markup=kb)
    await state.set_state(CalcFSM.year)
    await callback.answer()

@dp.callback_query(F.data.startswith("year:"))
async def calculator_choose_year(callback: CallbackQuery, state: FSMContext):
    year = callback.data.split(":", 1)[1]
    await state.update_data(year=year)
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ–¥: <b>{year}</b>\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1200000):", parse_mode="HTML")
    await state.set_state(CalcFSM.budget)
    await callback.answer()

@dp.message(StateFilter(CalcFSM.budget))
async def calculator_finish(message: Message, state: FSMContext):
    await state.update_data(budget=message.text)
    data = await state.get_data()
    text = (f"üîé <b>–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
            f"–ú–∞—Ä–∫–∞: {data['brand']}\n"
            f"–ú–æ–¥–µ–ª—å: {data['model']}\n"
            f"–ì–æ–¥: {data['year']}\n"
            f"–ë—é–¥–∂–µ—Ç: {data['budget']} ‚ÇΩ\n\n"
            "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏ –∑–∞–∫–∞–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏ üëá")
    await message.answer(text, parse_mode='HTML', reply_markup=main_menu)
    await message.answer("‚úçÔ∏è –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–±–æ—Ä –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é? –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É!",
                         reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"), KeyboardButton(text="‚õî –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
    await state.clear()

@dp.message(F.text == "‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def request_start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(RequestFSM.name)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

@dp.message(StateFilter(RequestFSM.name))
async def request_name(message: Message, state: FSMContext):
    if message.text == "‚õî –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    await state.update_data(name=message.text)
    await state.set_state(RequestFSM.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")

@dp.message(StateFilter(RequestFSM.phone))
async def request_phone(message: Message, state: FSMContext):
    if message.text == "‚õî –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    await state.update_data(phone=message.text)
    await state.set_state(RequestFSM.comment)
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ (–º–æ–¥–µ–ª—å, –≥–æ–¥, –±—é–¥–∂–µ—Ç –∏–ª–∏ –≤–æ–ø—Ä–æ—Å):")

@dp.message(StateFilter(RequestFSM.comment))
async def request_finish(message: Message, state: FSMContext):
    if message.text == "‚õî –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    await state.update_data(comment=message.text)
    data = await state.get_data()
    notify = (f"üì• <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ AutoSeller24</b>\n"
              f"–ò–º—è: {data['name']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}\n"
              f"Telegram: @{message.from_user.username if message.from_user.username else '-'}")
    await bot.send_message(OWNER_CHAT_ID, notify, parse_mode="HTML")
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=main_menu)
    await state.clear()

@dp.message(F.text == "‚õî –û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu)

@dp.message(F.text == "‚ùì FAQ")
async def faq_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–≤—ã–±–µ—Ä–∏—Ç–µ):", reply_markup=get_faq_keyboard())

@dp.callback_query(F.data.startswith("faq_"))
async def faq_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    idx = int(callback.data.split("_")[1])
    a = faq_list[idx]["a"]
    await callback.message.answer(f"‚ÑπÔ∏è {a}")
    await callback.answer()

@dp.message(F.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")
async def contact_handler(message: Message, state: FSMContext):
    await state.clear()
    text = ("<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –°–µ—Ä–≥–µ—è</b>\n\n"
            "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (391) 555-0123\n"
            "üí¨ Telegram: @autoseller24\n"
            "üü¢ WhatsApp: +7 (391) 555-0123\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∑–≤–æ–Ω–∏—Ç—å –∏–ª–∏ –ø–∏—Å–∞—Ç—å –≤ Telegram –∏ WhatsApp –ø–æ –¥–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É.")
    await message.answer(text, parse_mode="HTML")

@dp.message(F.text == "‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏")
async def about_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("AutoSeller24 ‚Äî –∏–º–ø–æ—Ä—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ –Ø–ø–æ–Ω–∏–∏ –ø–æ–¥ –∑–∞–∫–∞–∑ —Å 2022 –≥–æ–¥–∞. –ë–æ–ª–µ–µ 500 –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.", reply_markup=main_menu)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
